{
	"papers" : [
		{
			"id" : 1,
			"title" : "Extracting Parallel Control Flow Graphs with Synchronization Information from Java Program",
			"abs"   : "abs",
			"authors" : "G. Liva, F. Spegni, L. Spalazzi, A. Bollin, M. Pinzger",
			"url"  : "./papers/AAU-SERG-2017-001.pdf",
			"tool" : "",
			"year" : "year",
			"venue": "",
			"img"  : "",
			"img_caption" : "",
			"pages": "",
			"ENTRY_ID" : "",
			"date" : "1451606400"
		},
		{
			"id" : 2,
			"title" : "Extracting Timed Automata from Java Methods",
			"abs"   : "abs1",
			"authors" : "G. Liva, M. T. Khan, M. Pinzger",
			"url"  : "./papers/Extracting_Timed_Automata_from_Java_Methods.pdf",
			"tool" : "https://github.com/rtse-project/extracting-timed-automata",
			"year" : "year",
			"venue": "",
			"img"  : "",
			"img_caption" : "",
			"pages": "",
			"ENTRY_ID" : "",
			"date" : "1501545600"
		},
		{
			"id" : 3,
			"title" : "Modeling Time in Java Programs for Automatic Error Detection",
			"abs"   : "Modern programming languages, such as Java, represent time as integer variables, called timestamps. Timestamps allow developers to tacitly model incorrect time values resulting in a program failure because any negative value or every positive value is not necessarily a valid time representation. Current approaches to automatically detect errors in programs, such as Randoop and FindBugs, cannot detect such errors because they treat timestamps as normal integer variables and test them with random values verifying if the program throws an exception. In this paper, we present an approach that considers the time semantics of the Java language to systematically detect time related errors in Java programs. With the formal time semantics, our approach determines which integer variables handle time and which statements use or alter their values. Based on this information, it translates these statements into an SMT model that is passed to an SMT solver. The solver formally verifies the correctness of the model and reports the violations of time properties in that program. For the evaluation, we have implemented our approach in a prototype tool and applied it to the source code of 20 Java open source projects. The results show that our approach is scalable and it is capable of detecting time errors precisely enough allowing its usability in real-world applications.",
			"authors" : "G. Liva, M. T. Khan, F. Spegni, L. Spalazzi, A. Bollin, M. Pinzger",
			"url"  : "./papers/Modeling_Time_in_Java_Programs_for_Automatic_Error_Detection.pdf",
			"tool" : "https://github.com/rtse-project/automatic-error-detection",
			"year" : "2018",
			"venue": "Proceedings of the 6th Conference on Formal Methods in Software Engineering",
			"img"  : "transparent.jpg",
			"img_caption" : "Overview of our approach for detecting time property violations. Time Slice slices the program keeping only the statements that alter and use time variables. Path Generation generates multiple execution paths of the slice based on its control flow. SMT Translation translates each path into SMT constraints. Each model of SMT constraints is fed into an SMT solver to check for violations of time properties in the source code.",
			"pages": "50--59",
			"ENTRY_ID" : "liva2018modelling",
			"date" : "1535760000"
		}
	]
}
